// GENG5508 Robotics
// Semester 2, 2017
// Lab 4
// Aaron Hurst,   21325887
// Gwendolyn Foo, 21299545

#include <stdio.h>		// printf
#include <math.h>		// pow, sqrt
#include "eyebot.h"		// EyeBot 7 library
#include "image.h"		// read pbm image


#define PI 				3.14159265

#define PSD_LEFT 		1
#define PSD_FRONT		2
#define PSD_RIGHT		3

#define TARGET_RADIUS	3		// acceptable distance from target
#define SMALL_ANGLE		5		// maximum target angle for straight ahead driving
#define LIN_SPEED		100		// standard linear speed

#define IMG_SIZE		128		// size of input image/map
#define MIN_MODE_SIZE	16		// minimum node size to consider
#define MAP_SIZE		4000	// dimensions of world map


void quad_count(int image[IMG_SIZE][IMG_SIZE], int x, int y, int size, int *n_free, int *n_occ)
{
	int all_free = 1;
	int all_occ = 1;
	
	//printf("x: %3d, y: %3d, size: %3d ... ", x, y, size);
	
	for (int i = x; i < x + size; i++)
	{
		for (int j = y; j < y + size; j++)
		{
			// Update all_free and all_occ based on pixel value
			//printf("%d", image[i][j]);
			if (image[i][j] == 1)	all_free = 0;	// at least 1 pixel in region is occupied
			else 					all_occ = 0;	// at least 1 pixel in region is free
		}
		//printf("\n");
		// If neither all free or all occupied, area must be subdivided - break out of loop
		if (all_free == 0 && all_occ == 0)
		{
			break;
		}
	}
	//printf("Bottom left (%3d, %3d): %d\n", x, y + size -1, img[(size-1)*size]);
	
	if (all_free == 1)
	{
		(*n_free)++;	// increment number of free nodes
		//printf("All free\n");
		LCDArea(x, y, x + size, y + size, RED, 0);
	}
	else if (all_occ == 1)
	{
		(*n_occ)++;	// incremeent number of occupied nodes
		//printf("All occupied\n");
	}
	else if (size>1)				// subdivide
	{
		//printf("Subdividing...\n");
		int size2 = size/2;
		
		//printf("Sub-area 1: ");
		quad_count(image, x, y, size2, n_free, n_occ);	// note the lack of ampersands - n_free in this scope is already the pointer to n_free in main's scope
		
		//printf("Sub-area 2: ");
		quad_count(image, x + size2, y, size2, n_free, n_occ);
		
		//printf("Sub-area 3: ");
		quad_count(image, x, y + size2, size2, n_free, n_occ);
		
		//printf("Sub-area 4: ");
		quad_count(image, x + size2, y + size2, size2, n_free, n_occ);
	}
}


void quad(int image[IMG_SIZE][IMG_SIZE], int x, int y, int size, int nodes_free[][3], int nodes_occ[][3], int* n_free, int *n_occ)
{
	int all_free = 1;
	int all_occ = 1;
	
	for (int i = x; i < x + size; i++)
	{
		for (int j = y; j < y + size; j++)
		{
			// Update all_free and all_occ based on pixel value
			if (image[i][j] == 1)	all_free = 0;	// at least 1 pixel in region is occupied
			else 					all_occ = 0;	// at least 1 pixel in region is free
		}
		// If neither all free or all occupied, area must be subdivided - break out of loop
		if (all_free == 0 && all_occ == 0)	break;
	}
	
	if (all_free == 1)			// add to free nodes
	{
		nodes_free[*n_free][0] = x + size/2;
		nodes_free[*n_free][1] = y + size/2;
		nodes_free[*n_free][2] = size;
		(*n_free)++;
	}
	else if (all_occ == 1)		// add to occupied nodes
	{
		nodes_occ[*n_occ][0] = x + size/2;
		nodes_occ[*n_occ][1] = y + size/2;
		nodes_occ[*n_occ][2] = size;
		(*n_occ)++;
	}
	else if (size>1)		// subdivide
	{
		int size2 = size/2;
		quad(image,  x        , y        , size2, nodes_free, nodes_occ, n_free, n_occ);
		quad(image,  x + size2, y        , size2, nodes_free, nodes_occ, n_free, n_occ);
		quad(image,  x        , y + size2, size2, nodes_free, nodes_occ, n_free, n_occ);
		quad(image,  x + size2, y + size2, size2, nodes_free, nodes_occ, n_free, n_occ);
	}
}


void print_nodes(int nodes[][3], int n_nodes)
{
	for (int i = 0; i < n_nodes; i++)
	{
		printf(" Node %4d, position (%3d, %3d) and size %3d\n", i, nodes[i][0], nodes[i][1], nodes[i][2]);
	}
}



int link_clear(int x1, int y1, int x2, int y2, int x_occ, int y_occ, int size_occ)
{
	int Ftl, Ftr, Fbl, Fbr;
	
	Ftl = (y2-y1)*(x_occ-size_occ/2) + (x1-x2)*(y_occ-size_occ/2) + (x2*y1-x1*y2);
	Ftr = (y2-y1)*(x_occ+size_occ/2) + (x1-x2)*(y_occ-size_occ/2) + (x2*y1-x1*y2);
	Fbl = (y2-y1)*(x_occ-size_occ/2) + (x1-x2)*(y_occ+size_occ/2) + (x2*y1-x1*y2);
	Fbr = (y2-y1)*(x_occ+size_occ/2) + (x1-x2)*(y_occ+size_occ/2) + (x2*y1-x1*y2);
	
	if      (Ftl > 0 && Ftr > 0 && Fbl > 0 && Fbr > 0)		return 1;
	else if (Ftl < 0 && Ftr < 0 && Fbl < 0 && Fbr < 0)		return 1;
	else
	{
		if (x1 > (x_occ + size_occ/2) && x2 > (x_occ + size_occ/2))		return 1;
		if (x1 < (x_occ - size_occ/2) && x2 < (x_occ - size_occ/2))		return 1;
		if (y1 > (y_occ + size_occ/2) && y2 < (y_occ + size_occ/2))		return 1;
		if (y1 < (y_occ - size_occ/2) && y2 < (y_occ - size_occ/2))		return 1;
	}
	return 0;
}



float link_dist(int x1, int y1, int x2, int y2)
{
	return sqrt(pow(x1-x2,2) + pow(y1-y2,2));
}


void scale(int *x, int *y)
{
	(*x) = (*x)*IMG_SIZE/MAP_SIZE;
	(*y) = -(*y)*IMG_SIZE/MAP_SIZE;		// negative sign needed to compensate for default coordinate space of robot
	//(*phi) = -(*phi)
}



void drive_straight(int x, int y)
{
	x = (int) x*MAP_SIZE/IMG_SIZE;
	y = (int) y*MAP_SIZE/IMG_SIZE;
	
	// Calculate heading to target, maintain this heading
	int x_cur, y_cur, phi_cur;		// current pose
	float phi_target;				// current angle to target (local coordinates)
	
	VWGetPosition(&x_cur, &y_cur, &phi_cur);	// get current position
	y_cur = -y_cur;
	phi_cur = -phi_cur;
	
	
	phi_target = 180/PI*atan2(y - y_cur, x - x_cur) - phi_cur;	// calculate heading to target
	printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	printf("Current position: (%4d, %4d)\n", x_cur, y_cur);
	printf("Target position:  (%4d, %4d)\n", x, y);
	printf("Target angle:     %3.1f\n", phi_target);
	printf("Target distance:  %4.1f\n", link_dist(x_cur, y_cur, x, y));
	printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	
	if (abs(phi_target) < SMALL_ANGLE)	VWStraight(LIN_SPEED, 100);		// straight
	else if (phi_target > 0)			VWCurve(200, -30, 100);			// right?
	else if (phi_target < 0)			VWCurve(200, 30, 100);			// left?
	
	OSWait(100);
}



int main (int argc, char **argv)
{
	int n_free = 0;
	int n_occ = 0;
	BYTE *img;
	
	if      (atoi(argv[1]) == 1)		read_pbm("corner.pbm", &img);//char *filename = "corner.pbm";
	else if (atoi(argv[1]) == 2)		read_pbm("blocks.pbm", &img);//char *filename = "blocks.pbm";
	else if (atoi(argv[1]) == 3)		read_pbm("diagonal.pbm", &img);//char *filename = "diagonal.pbm";
	else
	{
		printf("ERROR: Invalid argument (only accepts 1, 2 or 3)\n");
		return -1;
	}
	
	
	// Read map
	//read_pbm(filename, &img);		// from image.h
	LCDArea(0, 0, IMG_SIZE, IMG_SIZE, 0xFFFFFF, 1);
	LCDImageStart(0, 0, IMG_SIZE, IMG_SIZE);
	LCDImageBinary(img);
	
	// Convert to a two dimensional array
	int image[IMG_SIZE][IMG_SIZE];
	for (int i = 0; i < IMG_SIZE; i++)
	{
		for (int j = 0; j < IMG_SIZE; j++)
		{
			image[j][i] = img[i*IMG_SIZE + j];
		}
	}
	
	// Determin number of free and occupied nodes
	quad_count(image, 0, 0, IMG_SIZE, &n_free, &n_occ);		// determine number of free and occupied nodes
	printf("\n======================\n");
	printf(" Nodes free:     %4d\n", n_free);
	printf(" Nodes occupied: %4d\n", n_occ);
	printf("======================\n\n");
	
	
	// Initialise and populate arrays of free and occupied nodes
	int nodes_free[n_free][3];
	int nodes_occ[n_occ][3];
	n_free = 0;
	n_occ = 0;
	quad(image, 0, 0, IMG_SIZE, nodes_free, nodes_occ, &n_free, &n_occ);		// determine location of free and occupied nodes
	
	// Print free nodes
	printf("=============================================\n");
	printf("The free nodes are:\n");
	print_nodes(nodes_free, n_free);
	printf("=============================================\n\n");
	
	// Calculate and print all free paths between node centre-points
	float links[n_free][n_free];
	float dist, dist_avg = 0;
	int n_clear = 0;
	int n_obstructed = 0;
	
	printf("=================================================\n");
	for (int i = 0; i < n_free; i++)
	{
		if (nodes_free[i][2] >= MIN_MODE_SIZE)		// ignore small nodes
		{
			for (int j = i+1; j < n_free; j++)
			{
				if (nodes_free[j][2] >= MIN_MODE_SIZE)		// ignore small nodes
				{
					// Loop through all occupied nodes to see if they cross the link between free nodes i and j
					for (int k = 0; k < n_occ; k++)
					{
						links[i][j] = link_clear(nodes_free[i][0], nodes_free[i][1], nodes_free[j][0], nodes_free[j][1], nodes_occ[k][0], nodes_occ[k][1], nodes_occ[k][2]);
						if (links[i][j] == 0)	break;
					}
					
					if (links[i][j] == 1)
					{
						n_clear++;
						dist = link_dist(nodes_free[i][0], nodes_free[i][1], nodes_free[j][0], nodes_free[j][1]);
						printf(" Node %3d to %3d is clear and of distance: %5.1f\n", i, j, dist);
						links[i][j] = dist;
						LCDLine(nodes_free[i][0], nodes_free[i][1], nodes_free[j][0], nodes_free[j][1], BLUE);
						dist_avg += dist;		// running total for calculation of average distance
					}
					else	n_obstructed++;
				}
			}
		}
	}
	printf("=================================================\n\n");
	
	// Calculate and print outputs
	dist_avg = dist_avg/n_clear;
	printf("===========================\n");
	printf(" Clear links:       %6d\n", n_clear);
	printf(" Obstructed links:  %6d\n", n_obstructed);
	printf(" Proportion clear:  %6.1f\n", (float) n_clear/(float)(n_obstructed+n_clear));
	printf(" Average distance:  %6.1f\n", dist_avg);
	printf("===========================\n\n");
	
	
	// Drive robot from top left to bottom right along a free path
	LCDMenu("Drive","","","Exit");
	int keycode = 0;
	while (keycode != 1 && keycode != 4)
		keycode = KEYRead();
	
	if (keycode == 4)
		return 0;
	
	VWSetPosition(nodes_free[0][0]*MAP_SIZE/IMG_SIZE, -nodes_free[0][1]*MAP_SIZE/IMG_SIZE,0);
	int x, y, phi;
	int node_cur = 0;
	int node_goal = n_free - 1;
	int node_target;
	float dist_curr_to_goal = 10000;
	float dist_target_to_goal = 10000;
	float dist_curr_to_target = 10000;
	float dist_temp;
	float phi_target;
	
	
	while (dist_curr_to_goal > TARGET_RADIUS)
	{
		// Select a target node that has a clear link to it and is closer to the destination
		for (int i = 1; i < n_free; i++)
		{
			if (links[node_cur][i] > 0)
			{
				dist_temp = link_dist(nodes_free[i][0], nodes_free[i][1], nodes_free[node_goal][0], nodes_free[node_goal][1]);
				if (dist_temp < dist_target_to_goal)	// select target that is closest to goal
				{
					dist_target_to_goal = dist_temp;
					node_target = i;
				}
			}
		}
		printf("Selected target node        %5d\n", node_target);
		
		// Rotate to face target node
		VWGetPosition(&x, &y, &phi);
		scale(&x, &y);
		phi_target = 180/PI*atan2(nodes_free[node_target][1] - y, nodes_free[node_target][0] - x) + phi;
		printf("Rotating %4.0f degrees to face target...\n", phi_target);
		VWTurn(-phi_target, 100);
		VWWait();
		
		// Drive to target
		while (dist_curr_to_target > TARGET_RADIUS)
		{
			drive_straight(nodes_free[node_target][0], nodes_free[node_target][1]);
			VWGetPosition(&x, &y, &phi);
			scale(&x, &y);
			dist_curr_to_target = link_dist(x, y, nodes_free[node_target][0], nodes_free[node_target][1]);
		}
		node_cur = node_target;		// update current position
		printf("\n");
		
		// Reset distance variables
		dist_target_to_goal = 10000;
		dist_curr_to_target = 10000;
		
		// Current distance to goal
		VWGetPosition(&x, &y, &phi);
		scale(&x, &y);
		dist_curr_to_goal = link_dist(x, y, nodes_free[node_goal][0], nodes_free[node_goal][1]);
		printf("Current distance to goal:   %5.0f\n", dist_curr_to_goal);
	}
	
	VWStraight(0,0);
	
	
	return 0;
}
